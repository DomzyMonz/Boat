import discord
import json
import asyncio
from discord.ext import commands
import datetime

class Ex(commands.Cog):
  def __init__(self, bot):
    self.bot = bot

  @commands.command(aliases=['usertelegraph', 'ut', 'us', 'usertele'])
  async def usercall(self, ctx, member: discord.Member):
  #------ Some Important Variables ------#
    counter = 0
    ch_mute = False
    dm_mute = False
    ch_force_end = False
    dm_force_end = False
  #------ Embed for Channel ------#
    call_emb = discord.Embed(title=f'Calling {member.display_name}',color=0xffcd75)
    call_emb.set_footer(text='React ❌ to cancel the call.')
    call_msg = await ctx.send(embed = call_emb)
  #------ Contact Channel ------#
    try:
      dm = await member.create_dm()
    except:
      bad_emb = discord.Embed(title=f'Failed to call {member.display_name}',color=0xb13e53)
      bad_emb.set_footer(text='The recipient of this call might be the bot, or an error of the bot.')
      await call_msg.edit(embed=bad_emb)
      return
  #------ Author Channel ------#
    channel = self.bot.get_channel(ctx.channel.id)
  #------ Embed for Member ------#
    dm_emb = discord.Embed(title=f'{ctx.author} is Calling...',description=f'{member.display_name} is calling you. You have 1 minute to answer.',color=0x73eff7)
    dm_emb.add_field(name='How to Answer',value='To answer, react ☑️ and react ❎ to decline a call.')
  #------ Reaction Answers ------#
    try:
      dm_call = await dm.send('', embed = dm_emb)
      reactions = ['☑️', '❎']
      await call_msg.add_reaction('❌')
      for reaction in reactions:
        await dm_call.add_reaction(reaction)
    except asyncio.TimeoutError:
      pass
  #------ Reaction Mechanism ------#
    try:
      def accept_check(reaction, user):
        return ((reaction.message.id and str(reaction.emoji) in reactions and user == member) or (str(reaction.emoji) == '❌' and user == ctx.author))
      reaction = await self.bot.wait_for("reaction_add",check=accept_check,timeout=60)
  #------ Decline ------#
      if str(reaction[0]) == '❎':
        await dm_call.delete()
        decline_emb = discord.Embed(title='Call not accepted', description=f'{member} did not accept the call.',color=0xb13e53)
        await call_msg.edit(embed=decline_emb)
        dm_call = await dm.send(embed=decline_emb)
        return
  #------ Accept ------#
      elif str(reaction[0]) == '☑️':
        await dm_call.delete()
        accept_emb = discord.Embed(title='Call accepted', description=f'{member} accepted the call.',color=0x38b764)
        await call_msg.edit(embed=accept_emb)
        dm_call = await dm.send(embed=accept_emb)
  #------ Cancel ------#
      elif str(reaction[0]) == '❌':
        await dm_call.delete()
        cancel_emb = discord.Embed(title='Canceled Call',color=0x333c57)
        await dm.send(embed = cancel_emb)
        await call_msg.clear_reactions()
        await call_msg.edit(embed = cancel_emb)
  #------ Ignore ------#
    except asyncio.TimeoutError:
      ignore_emb = discord.Embed(title='No Response', description=f'{member} did not answer.',color=0x1a1c2c)
      await dm_call.clear_reactions()
      await call_msg.edit(embed=ignore_emb)
      await dm_call.edit(embed=ignore_emb)
      return
  #------ Start Call ------#
    await call_msg.clear_reactions()
    call=True
    start=datetime.datetime.now()
    while call:
      try:
  #------ Wait for Member Response ------#
        def accept_check(m):
          return(m.author.bot == False)
        message= await self.bot.wait_for("message",check=accept_check,timeout=600)
        duration=(datetime.datetime.now()-start).total_seconds()
  #------- Settings -------#
        if message.content == 'b?settings' and (str (message.channel.type) == 'private' or (message.channel == channel)):
  #------- Settings - DM -------#
          if str(message.channel.type) == 'private':
            embed = discord.Embed (
              title = 'Settings',
              description = 'React using the corresponding emojis to toggle the settings',
              color = 0xffcd75
            )
            embed.set_author(name="Domzymonz#1900", icon_url="https://media.discordapp.net/attachments/800292729996967966/804197689092079616/Untitled16_20210124200535.png?width=473&height=473")
            if dm_force_end == False:
              fields = [
                ('------------------ General ------------------', '---------------------------------------------', False),
                ('🔇 Mute', 'Toggles mute in your party.', False),
                ('--------------- Call Settings ---------------', '---------------------------------------------', False),
                ('✉️ End', 'Ends the call if the other party accepts.', False),
                ('-------------- Miscellaneous --------------', '---------------------------------------------', False),
                ('◀️ Back', 'Returns you to the call.', True)
              ]
              reactions = ['🔇','✉️','◀️']
            else:
              reactions = ['🔇','✉️','🔒','◀️']
              fields = [
                ('------------------ General ------------------', '---------------------------------------------', False),
                ('🔇 Mute', 'Toggles mute in your party.', False),
                ('--------------- Call Settings ---------------', '---------------------------------------------', False),
                ('✉️ End', 'Ends the call if the other party accepts.', False),
                ('🔒 Force End', 'Forcefully ends the call.', False),
                ('-------------- Miscellaneous --------------', '---------------------------------------------', False),
                ('◀️ Back', 'Returns you to the call.', True)
              ]
            for name, value, inline in fields:
              embed.add_field(
                name = name,
                value = value,
                inline = inline
              )
            setting = await dm.send (embed = embed)
            for reaction in reactions:
              await setting.add_reaction(reaction)
            def reaction_check(reaction, user):
              return (reaction.message.id and str(reaction.emoji) in reactions and user == member)
            setting_r = await self.bot.wait_for("reaction_add",check=reaction_check)
  #------ Mute ------#
            if str(setting_r[0]) == '🔇':
              dm_mute = not dm_mute
              await setting.delete ()
              embed = discord.Embed (
                title = f'Mute = {dm_mute}',
                color = 0xffcd75
              )
              await dm.send (embed = embed)
  #------ New End ------#
            elif str(setting_r[0]) == '✉️':
              await setting.delete()
              confirm_emb = discord.Embed(
                title = 'End?',
                color = 0xffcd75
              )
              confirm = await channel.send(embed = confirm_emb)
              reactions = ['☑️', '❎']
              for reaction in reactions:
                await confirm.add_reaction(reaction)
              def reaction (reaction, user):
                return (reaction.message.id) == confirm.id and (user.bot == False) and str(reaction.emoji) in reactions
              end_confirm = await self.bot.wait_for("reaction_add",check=reaction)
              if str(end_confirm[0]) == '☑️':
                show_duration = True
                break
              else:
                dm_force_end = not dm_force_end
                await confirm.delete ()
                embed = discord.Embed(
                  title = f'{end_confirm[1].name} declined to end the call.',
                  color = 0xffcd75
                )
                await dm.send(embed = embed)
  #------ Back ------#
            elif str(setting_r[0]) == '◀️':
              await setting.delete ()
  #------ ForceEnd ------#
            elif str(setting_r[0]) == '🔒':
              show_duration = True
              break
  #------ Settings - Channel ------#
          else:
            embed = discord.Embed (
              title = 'Settings',
              description = 'React using the corresponding emojis to toggle the settings',
              color = 0xffcd75
            )
            if ch_force_end == False:
              reactions = ['🔇','✉️','📻','◀️']
              fields = [
                ('------------------ General ------------------', '---------------------------------------------', False),
                ('🔇 Mute', 'Toggles mute in your party.', False),
                ('📻 Relocate', 'Relocates the party\'s location.', False),
                ('--------------- Call Settings ---------------', '---------------------------------------------', False),
                ('✉️ End', 'Ends the call if the other party accepts.', False),
                ('-------------- Miscellaneous --------------', '---------------------------------------------', False),
                ('◀️ Back', 'Returns you to the call.', True)
              ]
            else:
              reactions = ['🔇','✉️','📻','🔒','◀️']
              fields = [
                ('------------------ General ------------------', '---------------------------------------------', False),
                ('🔇 Mute', 'Toggles mute in your party.', False),
                ('📻 Relocate', 'Relocates the party\'s location.', False),
                ('--------------- Call Settings ---------------', '---------------------------------------------', False),
                ('✉️ End', 'Ends the call if the other party accepts.', False),
                ('🔒 Force End', 'Forcefully ends the call.', False),
                ('-------------- Miscellaneous --------------', '---------------------------------------------', False),
                ('◀️ Back', 'Returns you to the call.', True)
              ]
            for name, value, inline in fields:
              embed.add_field(
                name = name,
                value = value,
                inline = inline
              )
            setting = await channel.send (embed = embed)
            for reaction in reactions:
              await setting.add_reaction(reaction)
            def reaction_check(reaction, user):
              return (reaction.message.id and str(reaction.emoji) in reactions and user == member)
            setting_r = await self.bot.wait_for("reaction_add",check=reaction_check)
  #------ Mute ------#
            if str(setting_r[0]) == '🔇':
              ch_mute = not ch_mute
              await setting.delete ()
              embed = discord.Embed (
                title = f'Mute = {ch_mute}',
                color = 0xffcd75
              )
              await channel.send (embed = embed)
  #------ New End ------#
            elif str(setting_r[0]) == '✉️':
              await setting.delete()
              confirm_emb = discord.Embed(
                title = 'End?',
                color = 0xffcd75
              )
              confirm = await dm.send(embed = confirm_emb)
              reactions = ['☑️', '❎']
              for reaction in reactions:
                await confirm.add_reaction(reaction)
              def reaction (reaction, user):
                return (reaction.message.id) == confirm.id and (user.bot == False) and str(reaction.emoji) in reactions
              end_confirm = await self.bot.wait_for("reaction_add",check=reaction)
              if str(end_confirm[0]) == '☑️':
                show_duration = True
                break
              else:
                ch_force_end = not ch_force_end
                await confirm.delete ()
                embed = discord.Embed(
                  title = f'{end_confirm[1].name} declined to end the call.',
                  color = 0xffcd75
                )
                await channel.send(embed = embed)
  #------ Change Channel ------#
            elif str(setting_r[0]) == '📻':
              await setting.delete ()
              channels = []
              for channel_r in ctx.guild.text_channels:
                permission = ctx.author.permissions_in(channel).send_messages
                if permission == True:
                  channels.append(channel_r)
              index = 0
              embed = discord.Embed(
                title = 'Select Channel',
                description = 'Please select the channel you want to relocate the call. You can do so by reacting with the corresponding emote.',
                color = 0xef7d57
              )
              embed.add_field(
                name = f'{index + 1}: {channels[index].name}',
                value = f'ID: {channels[index].id}',
                inline = False
              )
              message = await ctx.send(embed=embed)
              while True:
                if index == 0:
                  reactions = ['⏺' ,'⏩','◀️']
                  add = ['🟦', '⏺' ,'⏩','◀️']
                elif index + 1 == len(channels):
                  reactions = ['⏪', '⏺','◀️']
                  add = ['⏪', '⏺', '🟦','◀️']
                elif channels[index].id == channel.id:
                  reactions = ['⏪','⏩','◀️']
                  add = ['⏪','🟦','⏩','◀️']
                else:
                  reactions = ['⏪', '⏺' ,'⏩','◀️']
                  add = reactions
                for reaction in add:
                  await message.add_reaction(reaction)
                def check (reaction, user):
                  return reaction.message.id == message.id and str(reaction.emoji) in reactions and user == ctx.author
                reaction = await self.bot.wait_for('reaction_add', check=check)
                if str(reaction[0]) == '⏪':
                  index = index - 1
                  embed = discord.Embed(
                    title = 'Select Channel',
                    description = 'Please select the channel you want to relocate the call. You can do so by reacting with the corresponding emote.',
                    color = 0xef7d57
                  )
                  embed.add_field(
                    name = f'{index + 1}: {channels[index].name}',
                    value = f'ID: {channels[index].id}',
                    inline = False
                  )
                  try:
                    await message.clear_reactions()
                    await message.edit (embed = embed)
                  except:
                    await message.delete()
                    message = await ctx.send(embed = embed)
                elif str(reaction[0]) == '⏩':
                  index = index + 1
                  embed = discord.Embed(
                    title = 'Select Server',
                    description = 'Please select the server you want to relocate the call. You can do so by reacting with the corresponding emote.',
                    color = 0xef7d57
                  )
                  embed.add_field(
                    name = f'{index + 1}: {channels[index].name}',
                    value = f'ID: {channels[index].id}',
                    inline = False
                  )
                  try:
                    await message.clear_reactions()
                    await message.edit (embed = embed)
                  except:
                    await message.delete()
                    message = await ctx.send(embed = embed)
                elif str(reaction[0]) == '⏺':
                  await message.delete()
                  relocate_emb = discord.Embed(
                    title = f'Successfully relocated call to {channels[index].name}',
                    color = 0xef7d57
                  )
                  await channel.send(embed=relocate_emb)
                  id = channels[index].id
                  channel = self.bot.get_channel(id)
                  await channel.send(embed=relocate_emb)
                  break
                elif str(reaction[0]) == '◀️':
                  await message.delete()
                  break
  #------ Back ------#
            elif str(setting_r[0]) == '◀️':
              await setting.delete ()
  #------ ForceEnd ------#
            elif str(setting_r[0]) == '🔒':
              show_duration = True
              break
  #------ Chat ------#
        elif message.author == member and str(message.channel.type) == "private":
          if dm_mute == False:
            await channel.send(f"**{message.author.display_name}#{message.author.discriminator} :**\n{message.content}")
            counter = counter + 1
        elif message.channel == channel:
          if ch_mute == False:
            await dm.send(f"**{message.author.display_name}#{message.author.discriminator} :**\n{message.content}")
            counter = counter + 1
  #------ No Response ------#
      except asyncio.TimeoutError:
        start_emb = discord.Embed(title='Waiting too long', description='No message was sent for more then 10 minutes.',color=0x73eff7)
        await channel.send(embed=start_emb)
        await dm.send(embed=start_emb)
        show_duration = True
        break
  #------ End Embed ------#
    if show_duration == True:
      end_emb = discord.Embed(title='Call ended', description=f'{message.author.mention} ended the call..',color=0x73eff7)
      end_emb.add_field(name = 'Duration', value = f'Duration: {str(duration)[:-3]}s')
      end_emb.add_field(name = 'Messages', value = f'Messages: {counter} messages')
      await channel.send(embed=end_emb)
      await dm.send(embed=end_emb)

  @commands.command(aliases=['servertelegraph', 'sc', 'st', 'servertele'])
  async def servercall(self, ctx):
    servers=[]
    for activeserver in list(self.bot.guilds):
      if activeserver != ctx.guild:
        servers.append(activeserver)
    index = 0
    embed = discord.Embed(
      title = 'Select Server',
      description = 'Please select the server you want to call. You can do so by reacting with the corresponding emote.'
    )
    embed.add_field(
      name = f'{index + 1}: {servers[index].name}',
      value = f'ID: {servers[index].id}',
      inline = False
    )
    message = await ctx.send(embed=embed)
    while True:
      if index == 0:
        reactions = ['⏺' ,'⏩']
        add = ['🟦', '⏺' ,'⏩']
      elif index + 1 == len(servers):
        reactions = ['⏪', '⏺']
        add = ['⏪', '⏺', '🟦']
      else:
        reactions = ['⏪', '⏺' ,'⏩']
        add = reactions
      for reaction in add:
        await message.add_reaction(reaction)
      def check (reaction, user):
        return reaction.message.id == message.id and str(reaction.emoji) in reactions and user == ctx.author
      reaction = await self.bot.wait_for('reaction_add', check=check)
      if str(reaction[0]) == '⏪':
        index = index - 1
        embed = discord.Embed(
          title = 'Select Server',
          description = 'Please select the server you want to call. You can do so by reacting with the corresponding emote.'
        )
        embed.add_field(
          name = f'{index + 1}: {servers[index].name}',
          value = f'ID: {servers[index].id}',
          inline = False
        )
        try:
          await message.clear_reactions()
          await message.edit (embed = embed)
        except:
          await message.delete()
          message = await ctx.send(embed = embed)
      elif str(reaction[0]) == '⏩':
        index = index + 1
        embed = discord.Embed(
          title = 'Select Server',
          description = 'Please select the server you want to call. You can do so by reacting with the corresponding emote.'
        )
        embed.add_field(
          name = f'{index + 1}: {servers[index].name}',
          value = f'ID: {servers[index].id}',
          inline = False
        )
        try:
          await message.clear_reactions()
          await message.edit (embed = embed)
        except:
          await message.delete()
          message = await ctx.send(embed = embed)
      else:
        await message.delete()
        id = servers[index].id
        channels = []
        guild = self.bot.get_guild(id)
        for channel in guild.text_channels:
          channels.append(channel)
        index = 0
        embed = discord.Embed(
          title = 'Select Channel',
          description = 'Please select the channel you want to call. You can do so by reacting with the corresponding emote.'
        )
        embed.add_field(
          name = f'{index + 1}: {channels[index].name}',
          value = f'ID: {channels[index].id}',
          inline = False
        )
        message = await ctx.send(embed=embed)
        while True:
          if index == 0:
            reactions = ['⏺' ,'⏩', '🔙']
            add = ['🟦', '⏺' ,'⏩', '🔙']
          elif index + 1 == len(channels):
            reactions = ['⏪', '⏺', '🔙']
            add = ['⏪', '⏺', '🟦', '🔙']
          else:
            reactions = ['⏪', '⏺' ,'⏩', '🔙']
            add = reactions
          for reaction in add:
            await message.add_reaction(reaction)
          def check (reaction, user):
            return reaction.message.id == message.id and str(reaction.emoji) in reactions and user == ctx.author
          reaction = await self.bot.wait_for('reaction_add', check=check)
          if str(reaction[0]) == '⏪':
            index = index - 1
            embed = discord.Embed(
              title = 'Select Channel',
              description = 'Please select the channel you want to call. You can do so by reacting with the corresponding emote.'
            )
            embed.add_field(
              name = f'{index + 1}: {channels[index].name}',
              value = f'ID: {channels[index].id}',
              inline = False
            )
            try:
              await message.clear_reactions()
              await message.edit (embed = embed)
            except:
              await message.delete()
              message = await ctx.send(embed = embed)
          elif str(reaction[0]) == '⏩':
            index = index + 1
            embed = discord.Embed(
              title = 'Select Server',
              description = 'Please select the server you want to call. You can do so by reacting with the corresponding emote.'
            )
            embed.add_field(
              name = f'{index + 1}: {channels[index].name}',
              value = f'ID: {channels[index].id}',
              inline = False
            )
            try:
              await message.clear_reactions()
              await message.edit (embed = embed)
            except:
              await message.delete()
              message = await ctx.send(embed = embed)
          elif str(reaction[0]) == '⏺':
            await message.delete()
            id = channels[index].id
            break
            channel = self.bot.get_channel(id)
            counter = 0
            call_emb1 = discord.Embed(title=f'Calling **{channel.name}** from **{guild.name}**',color=0xFFA500)
            call_msg1 = await ctx.send (embed = call_emb1)
            call_emb2 = discord.Embed(title=f'**{ctx.channel.name}** is Calling...',description=f'**{ctx.channel.name}** from **{ctx.guild.name}** is calling you. You have 1 minute to answer.',color=0xFFA500)
            call_emb2.add_field(name='How to Answer',value='To answer, reply `accept` or `answer`. To decline, ignore this message or type `decline`')
            call_msg2 = await channel.send (embed = call_emb2)
            try:
              def accept_check(m):
                return(m.channel == channel)
              message = await self.bot.wait_for("message",check=accept_check,timeout=60)
            except asyncio.TimeoutError:
              start_emb = discord.Embed(title='No Response', description=f'{channel.name} did not answer.',color=0x000000)
              await call_msg1.edit(embed=start_emb)
              await call_msg2.edit(embed=start_emb)
              show_duration = False
              return
            if message.content not in ["accept","answer","hi","hello"]:
              start_emb = discord.Embed(title='Call not accepted', description=f'{channel.name} did not accept the call.',color=0x800000)
              await call_msg1.edit(embed=start_emb)
              await call_msg2.edit(embed=start_emb)
              return
            else:
              start_emb = discord.Embed(title='Call accepted', description=f'{channel.name} accepted the call.',color=0x288B22)
              await call_msg1.edit(embed=start_emb)
              await call_msg2.edit(embed=start_emb)
              call = True
              start=datetime.datetime.now()
            while call:
              try:
                def accept_check(m):
                  return((m.channel == channel or m.channel == ctx.channel) and not m.author.bot)
                message= await self.bot.wait_for("message",check=accept_check,timeout=600)
                if message.content == "b?end" and (message.channel == ctx.channel or message.channel == channel):
                  show_duration = True
                  break
                elif message.channel == channel:
                  await ctx.send(f"**{message.author.display_name}#{message.author.discriminator} :**\n{message.content}")
                  counter = counter + 1
                elif message.channel == ctx.channel:
                  await channel.send(f"**{message.author.display_name}#{message.author.discriminator} :**\n{message.content}")
                  counter = counter + 1
              except asyncio.TimeoutError:
                start_emb = discord.Embed(title='Waiting too long', description='No message was sent for more then 10 minutes.',color=0x00FFFF)
                await ctx.send(embed=start_emb)
                await channel.send(embed=start_emb)
                show_duration = True
                break
            if show_duration == True:
              end_emb = discord.Embed(title='Call ended', description=f'{message.author.mention} ended the call..',color=0x00FFFF)
              end_emb.add_field(name = 'Duration', value = f'Duaration: {str((datetime.datetime.now()-start).total_seconds())[:-3]}s')
              end_emb.add_field(name = 'Messages', value = f'Messages: {counter} messages')
              await ctx.send(embed=end_emb)
              await channel.send(embed=end_emb)
          else:
            index = 0
            embed = discord.Embed(
              title = 'Select Server',
              description = 'Please select the server you want to call. You can do so by reacting with the corresponding emote.'
            )
            embed.add_field(
              name = f'{index + 1}: {servers[index].name}',
              value = f'ID: {servers[index].id}',
              inline = False
            )
            try:
              await message.clear_reactions()
              await message.edit (embed = embed)
            except:
              await message.delete()
              message = await ctx.send(embed = embed)
            break

def setup(bot):
  bot.add_cog(Ex(bot))
  print ('Loaded Experiment Cog Successfully!')